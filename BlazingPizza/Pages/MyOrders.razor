@page "/myorders"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    @if (ordersWithStatus is null)
    {
        <text>Loading...</text>
    }
    else if (ordersWithStatus.Any() == false)
    {
        <h2>No orders placed yet</h2>
        <a class="btn btn-success" href="">Order some pizzas</a>
    }
    else
    {
        <TabContainer>
            <div class="track-order">
                @foreach (var ows in ordersWithStatus)
                {
                    <TabPage Title=@ows.Order.CreatedTime.ToLongDateString()>
                        <div class="track-order-title">
                            <h2>Order placed: @ows.Order.CreatedTime.ToLongDateString()</h2>
                            <p class="ml-auto mb-0">
                                Items: <strong>@ows.Order.Pizzas.Count()</strong>
                                Total price: <strong>£@ows.Order.GetFormattedTotalPrice()</strong>
                                @if (ows.StatusText != "Delivered")
                                {
                                    <a href="myorders/@ows.Order.OrderId" class="btn btn-success ml-4">
                                        Track &gt;
                                    </a>
                                }
                            </p>
                        </div>
                        <div class="track-order-body">
                            <div class="track-order-details">
                                @foreach (var pizza in ows.Order.Pizzas)
                                {
                                    <p>
                                        <strong>
                                            @(pizza.Size)"
                                            @pizza.Special.Name
                                            (£@pizza.GetFormattedTotalPrice())
                                        </strong>
                                    </p>
                                }
                            </div>
                        </div>
                    </TabPage>
                }
            </div>
        </TabContainer>
    }
</div>

@code
{
    private List<OrderWithStatus> ordersWithStatus = new();

    protected override async Task OnParametersSetAsync()
    {
        ordersWithStatus = await HttpClient.GetFromJsonAsync<List<OrderWithStatus>>($"{NavigationManager.BaseUri}orders");
    }
}
