@page "/checkout"

@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@implements IDisposable

<div class="main">
    <EditForm EditContext="editContext" OnValidSubmit="PlaceOrder" OnInvalidSubmit="@(() => hasErrors = true)">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="order" />
            </div>
            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (hasErrors)
                {
                    <div class="alert alert-danger">
                        Please enter a name and address.
                    </div>
                }
                <AddressEditor Address="order.DeliveryAddress" />
            </div>
        </div>
        <button class="checkout-button btn btn-warning" type="submit" disabled=@hasErrors>
            Place order
        </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code
{
    private bool hasErrors;
    private Order order => OrderState.Order;
    private EditContext editContext;

    public void Dispose()
    {
        editContext.OnFieldChanged -= OnAddressFieldsChanged;
    }

    protected override void OnInitialized()
    {
        editContext = new(order.DeliveryAddress);
        editContext.OnFieldChanged += OnAddressFieldsChanged;
    }

    private async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var orderdId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{orderdId}");
    }

    private void OnAddressFieldsChanged(object sender, FieldChangedEventArgs e)
    {
        hasErrors = !editContext.Validate();
        StateHasChanged();
    }
}
